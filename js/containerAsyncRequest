/**
 * Created by rboinepalli on 7/20/17.
 */



var containerAsyncRequest  = {


    create : function(conn,metadataContainerId) {

        console.log('inside???async' + metadataContainerId);
        return conn.tooling.sobject('ContainerAsyncRequest').create({
            IsCheckOnly : true,
            MetadataContainerId : metadataContainerId


        });

    },

    retrieve : function(conn,containerAsyncId){
        return new Promise(function(resolve,reject){
            var state = 'Queued';
                //wait for 2 seconds (synchronously) , before checking for state
                var start = new Date().getTime();
                for (var i = 0; i < 1e7; i++) {
                    if ((new Date().getTime() - start) > 2000){
                        break; //
                    }
                }


                conn.tooling.sobject('ContainerAsyncRequest').retrieve(containerAsyncId)
                    .then(function (response) {
                        state = response.State;
                        if(state == 'Queued'){
                            //recursion
                           resolve(containerAsyncRequest.retrieve(conn,containerAsyncId));
                        } else {
                            resolve(response);
                        }

                    })
                    .catch(function(err){
                        console.log('error' + err);
                        reject(err)

                    });
        })
    }
};
  
module.exports = containerAsyncRequest;



